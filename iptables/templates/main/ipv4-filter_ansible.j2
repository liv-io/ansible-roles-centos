#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# FILTER
#-------------------------------------------------------------------------------

*filter

# Set the default policy and zero the packet and byte counters

{% for policy in iptables_filter_policies|default([]) %}
{%- if (policy.version is defined) and (policy.version is match('ipv4|v4|inet')) %}
{%- if (policy.comment is defined) and not (policy.comment == '') %}
# {{policy.comment}}
{% endif %}
{%- if (policy.direction is defined) and (policy.direction is match('input|in')) %}:INPUT {% elif (policy.direction is defined) and (policy.direction is match('forward|fw')) %}:FORWARD {% else %}:OUTPUT {% endif %}
{%- if (policy.action is defined) and (policy.action is match('accept')) %}ACCEPT {% elif (policy.action is defined) and (policy.action is match('reject')) %}REJECT {% else %}DROP {% endif %}
[0:0]
{% if not loop.last %}

{% endif %}
{% endif %}
{% endfor %}

#-------------------------------------------------------------------------------

# Established and related connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -m comment --comment "Incoming related and established connections"
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -m comment --comment "Outgoing related and established connections"

# Loopback connections
-A INPUT -i lo -j ACCEPT -m comment --comment "Incoming loopback connections"
-A OUTPUT -o lo -j ACCEPT -m comment --comment "Outgoing loopback connections"

#-------------------------------------------------------------------------------

# ALL

{% for all in iptables_filter_all|default([]) %}
{%- if (all.version is defined) and (all.version is match('ipv4|v4|inet')) %}
{%- if (all.comment is defined) and not (all.comment == '') %}
# {{all.comment}}
{% endif %}
-A
{%- if (all.direction is defined) and (all.direction is match('input|in')) %} INPUT {% elif (all.direction is defined) and (all.direction is match('forward|fw')) %} FORWARD {% else %} OUTPUT {% endif %}
{%- if (all.sources is defined) and not (all.sources == []) %}-s {% endif %}
{% for source in all.sources|default([]) %}
{{source}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (all.sources is defined) and not (all.sources == []) %} {% endif %}
{%- if (all.destinations is defined) and not (all.destinations == []) %}-d {% endif %}
{% for destination in all.destinations|default([]) %}
{{destination}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (all.destinations is defined) and not (all.destinations == []) %} {% endif %}
-m state --state NEW
{%- if (all.protocol is defined) and (all.protocol is match('icmp|icmpv4')) %} -m icmp -p icmp {% elif (all.protocol is defined) and (all.protocol is match('udp')) %} -m udp -p udp {% else %} -m tcp -p tcp {% endif %}
{%- if (all.code is defined) and not (all.code == '') %}--icmp-type {{all.code}} {% endif %}
{%- if (all.port is defined) and not (all.port == []) %}--dport {{all.port}} {% endif %}
{%- if (all.action is defined) and (all.action is match('accept')) %}-j ACCEPT {% elif (all.action is defined) and (all.action is match('reject')) %}-j REJECT {% else %}-j DROP {% endif %}
{%- if (all.comment is defined) and not (all.comment == []) %}-m comment --comment "{{all.comment}}"{% endif %}
{% if not loop.last %}

{% endif %}

{% endif %}
{% endfor %}

#-------------------------------------------------------------------------------

# GROUP

{% for group in iptables_filter_group|default([]) %}
{%- if (group.version is defined) and (group.version is match('ipv4|v4|inet')) %}
{%- if (group.comment is defined) and not (group.comment == '') %}
# {{group.comment}}
{% endif %}
-A
{%- if (group.direction is defined) and (group.direction is match('input|in')) %} INPUT {% elif (group.direction is defined) and (group.direction is match('forward|fw')) %} FORWARD {% else %} OUTPUT {% endif %}
{%- if (group.sources is defined) and not (group.sources == []) %}-s {% endif %}
{% for source in group.sources|default([]) %}
{{source}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (group.sources is defined) and not (group.sources == []) %} {% endif %}
{%- if (group.destinations is defined) and not (group.destinations == []) %}-d {% endif %}
{% for destination in group.destinations|default([]) %}
{{destination}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (group.destinations is defined) and not (group.destinations == []) %} {% endif %}
-m state --state NEW
{%- if (group.protocol is defined) and (group.protocol is match('icmp|icmpv4')) %} -m icmp -p icmp {% elif (group.protocol is defined) and (group.protocol is match('udp')) %} -m udp -p udp {% else %} -m tcp -p tcp {% endif %}
{%- if (group.code is defined) and not (group.code == '') %}--icmp-type {{group.code}} {% endif %}
{%- if (group.port is defined) and not (group.port == []) %}--dport {{group.port}} {% endif %}
{%- if (group.action is defined) and (group.action is match('accept')) %}-j ACCEPT {% elif (group.action is defined) and (group.action is match('reject')) %}-j REJECT {% else %}-j DROP {% endif %}
{%- if (group.comment is defined) and not (group.comment == []) %}-m comment --comment "{{group.comment}}"{% endif %}
{% if not loop.last %}

{% endif %}

{% endif %}
{% endfor %}

#-------------------------------------------------------------------------------

# HOST

{% for host in iptables_filter_host|default([]) %}
{%- if (host.version is defined) and (host.version is match('ipv4|v4|inet')) %}
{%- if (host.comment is defined) and not (host.comment == '') %}
# {{host.comment}}
{% endif %}
-A
{%- if (host.direction is defined) and (host.direction is match('input|in')) %} INPUT {% elif (host.direction is defined) and (host.direction is match('forward|fw')) %} FORWARD {% else %} OUTPUT {% endif %}
{%- if (host.sources is defined) and not (host.sources == []) %}-s {% endif %}
{% for source in host.sources|default([]) %}
{{source}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (host.sources is defined) and not (host.sources == []) %} {% endif %}
{%- if (host.destinations is defined) and not (host.destinations == []) %}-d {% endif %}
{% for destination in host.destinations|default([]) %}
{{destination}}{% if not loop.last %},{% endif %}
{% endfor %}
{%- if (host.destinations is defined) and not (host.destinations == []) %} {% endif %}
-m state --state NEW
{%- if (host.protocol is defined) and (host.protocol is match('icmp|icmpv4')) %} -m icmp -p icmp {% elif (host.protocol is defined) and (host.protocol is match('udp')) %} -m udp -p udp {% else %} -m tcp -p tcp {% endif %}
{%- if (host.code is defined) and not (host.code == '') %}--icmp-type {{host.code}} {% endif %}
{%- if (host.port is defined) and not (host.port == []) %}--dport {{host.port}} {% endif %}
{%- if (host.action is defined) and (host.action is match('accept')) %}-j ACCEPT {% elif (host.action is defined) and (host.action is match('reject')) %}-j REJECT {% else %}-j DROP {% endif %}
{%- if (host.comment is defined) and not (host.comment == []) %}-m comment --comment "{{host.comment}}"{% endif %}
{% if not loop.last %}

{% endif %}

{% endif %}
{% endfor %}

#-------------------------------------------------------------------------------
# DOCKER
#-------------------------------------------------------------------------------

