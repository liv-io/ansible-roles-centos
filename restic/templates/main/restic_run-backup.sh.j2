#!/usr/bin/env sh

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INFORMATION
#-------------------------------------------------------------------------------
#
# Name   : restic_run-backup.sh
# Type   : Shell script
# Role   : restic
#
# Authors: liv community
# License: Simplified BSD License
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
ssh=$(${which} ssh) || { echo "Error: Command 'ssh' not found."; exit 127; }
tr=$(${which} tr) || { echo "Error: Command 'tr' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

restic='{{file_path_restic}}' && [ -x ${restic} ] || { echo "Error: Command 'restic' not found."; exit 127; }

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
date_start=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
time_start=$(${date} '+%s')
user='{{file_owner_restic_run_backup_sh}}'
lockfile='{{file_path_restic_script_dir}}/restic_run-backup.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

ssh_options='-q -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o ConnectTimeout=5'
backup_user='{{restic_backup_user}}'
backup_server='{{restic_backup_server}}'
backup_folder="/backup/restic/$(hostname -s)"
repo="sftp:${backup_user}@${backup_server}:${backup_folder}"
password='{{file_path_password_conf}}'
include='{{file_path_include_conf}}'
exclude='{{file_path_exclude_conf}}'
log_file='{{file_path_restic_log}}'
keep_hourly='{{restic_keep_hourly}}'
keep_daily='{{restic_keep_daily}}'
keep_weekly='{{restic_keep_weekly}}'
keep_monthly='{{restic_keep_monthly}}'

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mail_sender='{{restic_monitor_mail_sender}}'
mail_recipient='{% for mail_recipient in restic_monitor_mail_recipient %}{{mail_recipient}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='{{restic_monitor_mail_subject}}'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
  retval=$1
  severity=$2
  message=$3
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : restic_run-backup.sh
Type        : Shell script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}

--------------------------------------------------------------------------------
MAIL
--------------------------------------------------------------------------------

Sender      : ${mail_sender}
Recipient   : ${mail_recipient}
Subject     : ${mail_subject}"

  ${echo} "${mail_body}" | ${mailx} -r "${mail_sender}" -s "${mail_subject}" "${mail_recipient}" > /dev/null 2>&1
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: "${severity}: ${message}""
    exit ${retval}
  fi
}

create_lockfile() {
  if [ ! -e ${lockfile} ]; then
    ${touch} ${lockfile} || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e ${lockfile} ]; then
    ${rm} -f ${lockfile} || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval=$1
  severity=$2
  message=$3
  if [ ${retval} -ne 0 ]; then
    ${rm} -f ${lockfile}
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: "${severity}: ${message}""
    ${logger} -t ${script} "${severity}: ${message}"
{% if (restic_monitor_mail_state is match('true|yes|enable')) %}
    mail_error ${retval} "${severity}" "${message}"
{% endif %}
    add_log_header 'backup failed'

    exit ${retval}
  fi
}

log_and_exit() {
  date_end=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
  time_end=$(${date} '+%s')
  time_exec=$(${expr} ${time_end} - ${time_start})
  time_hr=$(${date} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='Backup created successfully.'
  ${logger} -t ${script} "${severity}: ${message} Duration: ${time_hr}"

  exit ${retval}
}

# Add header to log file
add_log_header() {
  name=$1

  name_upper=$(${echo} ${name} | ${tr} '[:lower:]' '[:upper:]')
  date_time=$(${date} '+%Y-%m-%dT%H:%M:%S%z')
  echo "
#-------------------------------------------------------------------------------
# ${name_upper} | ${date_time}
#-------------------------------------------------------------------------------
" >> ${log_file}
}

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

check_script_user

create_lockfile

add_log_header 'backup started'

# Check SSH connectivity
${ssh} ${ssh_options} ${backup_user}@${backup_server} true
log_and_exit_on_error "$?" 'Error' "Unable to connect to backup server: '${backup_server}'"

# Check backup repository
${ssh} ${ssh_options} ${backup_user}@${backup_server} test -s ${backup_folder}/config
if [ $? -ne 0 ]; then
  ${restic} init -r ${repo} -p ${password} >> ${log_file} 2>&1
  log_and_exit_on_error "$?" 'Error' "Unable to create backup repository: '${repo}'"
fi

# Create new backup
${restic} backup -r ${repo} -p ${password} --files-from ${include} --exclude-caches --exclude-file ${exclude} >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' "Unable to create new backup"

# Remove old backups
${restic} forget -r ${repo} -p ${password} --keep-hourly ${keep_hourly} --keep-daily ${keep_daily} --keep-weekly ${keep_weekly} --keep-monthly ${keep_monthly} --prune >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' "Unable to remove old backups"

# Check backup repository
${restic} check -r ${repo} -p ${password} --with-cache >> ${log_file} 2>&1
log_and_exit_on_error "$?" 'Error' "Unable to check backup repository"

add_log_header 'backup successful'

remove_lockfile

log_and_exit
