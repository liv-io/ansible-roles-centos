#!/usr/bin/env sh

#-------------------------------------------------------------------------------
#                             ANSIBLE MANAGED FILE
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INFORMATION
#-------------------------------------------------------------------------------
#
# Name   : postgresql_run-backup
# Type   : Shell script
# Role   : postgresql
#
# Authors: liv community
# License: Simplified BSD License
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SHELL VARIABLES
#-------------------------------------------------------------------------------

SHELL='/bin/sh'
PATH='/sbin:/bin:/usr/sbin:/usr/bin'

#-------------------------------------------------------------------------------
# COMMANDS
#-------------------------------------------------------------------------------

which='/usr/bin/which' && [ -x ${which} ] || { echo "Error: Command 'which' not found."; exit 127; }
basename=$(${which} basename) || { echo "Error: Command 'basename' not found."; exit 127; }
chmod=$(${which} chmod) || { echo "Error: Command 'chmod' not found."; exit 127; }
chown=$(${which} chown) || { echo "Error: Command 'chown' not found."; exit 127; }
date=$(${which} date) || { echo "Error: Command 'date' not found."; exit 127; }
echo=$(${which} echo) || { echo "Error: Command 'echo' not found."; exit 127; }
expr=$(${which} expr) || { echo "Error: Command 'expr' not found."; exit 127; }
find=$(${which} find) || { echo "Error: Command 'find' not found."; exit 127; }
grep=$(${which} grep) || { echo "Error: Command 'grep' not found."; exit 127; }
gzip=$(${which} gzip) || { echo "Error: Command 'gzip' not found."; exit 127; }
hostname=$(${which} hostname) || { echo "Error: Command 'hostname' not found."; exit 127; }
logger=$(${which} logger) || { echo "Error: Command 'logger' not found."; exit 127; }
{% if (postgresql_monitor_mail_state is match('true|yes|enable')) %}
mailx=$(${which} mailx) || { echo "Error: Command 'mailx' not found."; exit 127; }
{% endif %}
rm=$(${which} rm) || { echo "Error: Command 'rm' not found."; exit 127; }
service=$(${which} service) || { echo "Error: Command 'service' not found."; exit 127; }
su=$(${which} su) || { echo "Error: Command 'su' not found."; exit 127; }
touch=$(${which} touch) || { echo "Error: Command 'touch' not found."; exit 127; }
whoami=$(${which} whoami) || { echo "Error: Command 'whoami' not found."; exit 127; }

pg_dump=$(${which} pg_dump) || { echo "Error: Command 'pg_dump' not found."; exit 127; }
psql=$(${which} psql) || { echo "Error: Command 'psql' not found."; exit 127; }

#-------------------------------------------------------------------------------
# VARIABLES
#-------------------------------------------------------------------------------

host=$(${hostname} -s) || { echo "Error: Host name unknown."; exit 68; }
script="$(${basename} $0)[$$]" || { echo "Error: Command invoked cannot execute."; exit 126; }
time_start=$(${date} '+%s')
user='{{file_owner_postgresql_run_backup}}'
lockfile='/var/tmp/postgresql_run-backup.lock'
retval=0
severity='Debug'
message='Please check log files for more information.'

postgresql_service_name='{{service_name_postgresql}}'
postgresql_host='localhost'
postgresql_username='postgres'
postgresql_password='{{postgresql_postgres_password}}'

backup_dir='/var/lib/pgsql/backups'
backup_timestamp=$(${date} '+%Y%m%d-%H%M%S%z')
backup_file_owner='{{file_owner_postgresql_backup_file}}'
backup_file_group='{{file_group_postgresql_backup_file}}'
backup_file_mode='{{file_mode_postgresql_backup_file}}'
backup_exclude="{% if not (postgresql_run_backup_exclude == []) %}{% for item in postgresql_run_backup_exclude %}{{item}}{% if not loop.last %}|{% endif %}{% endfor %}{% else %} {% endif %}"
keep_days={{(postgresql_run_backup_keep_days|int(2))}}
textfile_collector='{{postgresql_monitor_prom_textfile_collector}}'

{% if (postgresql_monitor_mail_state is match('true|yes|enable')) %}
mail_from_address='{{postgresql_monitor_mail_from_address}}'
mail_to_address='{% for item in postgresql_monitor_mail_to_address %}{{item}}{% if not loop.last %},{% endif %}{% endfor %}'
mail_subject='PostgreSQL: Run Backup - Error ({{ansible_hostname}})'
{% endif %}

#-------------------------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------------------------

{% if (postgresql_monitor_mail_state is match('true|yes|enable')) %}
mail_error() {
  retval="$1"
  severity="$2"
  message="$3"
  mail_body="--------------------------------------------------------------------------------
ERROR
--------------------------------------------------------------------------------

Message     : ${message}
Severity    : ${severity}
Date & Time : $(${date} '+%Y-%m-%dT%H:%M:%S%z')

--------------------------------------------------------------------------------
SCRIPT
--------------------------------------------------------------------------------

Name        : postgresql_run-backup
Type        : Shell script
PID         : $$

--------------------------------------------------------------------------------
SYSTEM
--------------------------------------------------------------------------------

Hostname    : {{ansible_hostname}}
FQDN        : {{ansible_fqdn}}"

  ${echo} "${mail_body}" | ${mailx} -r "${mail_from_address}" -s "${mail_subject}" "${mail_to_address}" > /dev/null 2>&1
}
{% endif %}

{% if (postgresql_monitor_prom_state is match('true|yes|enable')) %}
update_prom() {
  retval="$1"
  time_start="$2"
  time_exec="$3"

  if [ -w "${textfile_collector}" ]; then
    ${echo} -e "# HELP postgresql_run_backup_exit The script's exit code.\n"\
"# TYPE postgresql_run_backup_exit counter\n"\
"postgresql_run_backup_exit ${retval}" > "${textfile_collector}/postgresql_run_backup_exit.prom"

    if [ -z "${time_start}" ] ; then
      ${rm} -f "${textfile_collector}/postgresql_run_backup_start.prom"
    else
      ${echo} -e "# HELP postgresql_run_backup_start The script's start time in epoch.\n"\
"# TYPE postgresql_run_backup_start counter\n"\
"postgresql_run_backup_start ${time_start}" > "${textfile_collector}/postgresql_run_backup_start.prom"
    fi

    if [ -z "${time_exec}" ] ; then
      ${rm} -f "${textfile_collector}/postgresql_run_backup_duration.prom"
    else
      ${echo} -e "# HELP postgresql_run_backup_duration The script's execution duration in seconds.\n"\
"# TYPE postgresql_run_backup_duration counter\n"\
"postgresql_run_backup_duration ${time_exec}" > "${textfile_collector}/postgresql_run_backup_duration.prom"
    fi
  fi
}
{% endif %}

check_script_user() {
  if [ "$(${whoami})" != "${user}" ]; then
    retval=77
    severity='Error'
    message="Please run script as user '${user}'"
    ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    exit "${retval}"
  fi
}

create_lockfile() {
  if [ ! -e "${lockfile}" ]; then
    ${touch} "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not create lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile does already exist. Please investigate.'
  fi
}

remove_lockfile() {
  if [ -e "${lockfile}" ]; then
    ${rm} -f "${lockfile}" || log_and_exit_on_error "$?" 'Warning' 'Could not remove lockfile. Please investigate.'
  else
    log_and_exit_on_error "$?" 'Warning' 'Lockfile did not exist. Please investigate.'
  fi
}

log_and_exit_on_error() {
  retval="$1"
  severity="$2"
  message="$3"
  if [ "${retval}" -ne 0 ]; then
    ${rm} -f "${lockfile}"

    if [ -t 1 ] ; then
      ${echo} "$(${date} '+%Y-%m-%dT%H:%M:%S%z') - ${host} - ${script}: ${severity}: ${message}"
    fi

    ${logger} -t "${script}" "${severity}: ${message}"

{% if (postgresql_monitor_mail_state is match('true|yes|enable')) %}
    mail_error "${retval}" "${severity}" "${message}"
{% endif %}

{% if (postgresql_monitor_prom_state is match('true|yes|enable')) %}
    update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

    exit "${retval}"
  fi
}

log_and_exit() {
  time_end=$(${date} '+%s')
  time_exec=$(${expr} "${time_end}" - "${time_start}")
  time_hr=$(${date} -d "1970-01-01 ${time_exec} sec" '+%H:%M:%S')

  retval=0
  severity='Info'
  message='Backup created successfully.'
  ${logger} -t "${script}" "${severity}: ${message} Duration: ${time_hr}"

{% if (postgresql_monitor_prom_state is match('true|yes|enable')) %}
  update_prom "${retval}" "${time_start}" "${time_exec}"
{% endif %}

  exit "${retval}"
}

#-------------------------------------------------------------------------------
# SCRIPT
#-------------------------------------------------------------------------------

check_script_user

create_lockfile

# Check if PostgreSQL server is running
${service} ${postgresql_service_name} status > /dev/null 2>&1
log_and_exit_on_error "$?" 'Warning' 'PostgreSQL server is not running.'

# Get individual PostgreSQL databases
databases=$(${su} ${postgresql_username} -c "PGPASSWORD=${postgresql_password} ${psql} -h ${postgresql_host} -U ${postgresql_username} -At -c 'select datname from pg_database order by datname;' | ${grep} -vE \"${backup_exclude}\"")
log_and_exit_on_error "$?" 'Error' 'Unable to get individual PostgreSQL databases.'

# Dump and compress individual PostgreSQL databases
for db in ${databases} ; do
  ${su} ${postgresql_username} -c "PGPASSWORD=${postgresql_password} ${pg_dump} -h ${postgresql_host} -U ${postgresql_username} -Fc ${db} | ${gzip} -c > ${backup_dir}/${host}_${db}_${backup_timestamp}.gz"
  if [ "$?" -eq 0 ]; then
    severity='Info'
    message="'${db}' dumped and compressed."
    ${logger} -t "${script}" "${severity}: ${message}"
  else
    log_and_exit_on_error "$?" 'Error' "Unable to dump and compress '${db}'."
  fi
done

# Ensure proper file owner and group
${find} "${backup_dir}" -type f -name "${host}_*_${backup_timestamp}.gz" -exec ${chown} ${backup_file_owner}:${backup_file_group} '{}' ';'
log_and_exit_on_error "$?" 'Error' 'Unable to ensure proper file owner and group.'

# Ensure proper file permission
${find} "${backup_dir}" -type f -name "${host}_*_${backup_timestamp}.gz" -exec ${chmod} ${backup_file_mode} '{}' ';'
log_and_exit_on_error "$?" 'Error' 'Unable to ensure proper file permission.'

# Remove old PostgreSQL database dumps
${find} "${backup_dir}" -type f -name "${host}_*.gz" -mtime +${keep_days} -exec ${rm} -f '{}' ';'
log_and_exit_on_error "$?" 'Error' 'Unable to remove old PostgreSQL database dumps.'

remove_lockfile

log_and_exit
